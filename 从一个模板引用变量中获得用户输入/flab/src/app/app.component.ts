import {Component} from '@angular/core';

/**
 * 用户输入
 * 当用户点击链接、按下按钮或者输入文字时，这些用户动作都会产生 DOM 事件。
 * 本章解释如何使用 Angular 事件绑定语法把这些事件绑定到事件处理器。
 *
 * 绑定到用户输入事件
 * 你可以使用 Angular 事件绑定机制来响应任何 DOM 事件。
 * 许多 DOM 事件是由用户输入触发的。绑定这些事件可以获取用户输入。
 *
 * 要绑定 DOM 事件，只要把 DOM 事件的名字包裹在圆括号中，然后用放在引号中的模板语句对它赋值就可以了。
 * 下例展示了一个事件绑定，它实现了一个点击事件处理器：
 * <button (click)="onClickMe()">Click me!</button>
 * 等号左边的 (click) 表示把按钮的点击事件作为绑定目标。
 * 等号右边引号中的文本是模板语句，通过调用组件的 onClickMe 方法来响应这个点击事件。
 *
 * 写绑定时，需要知道模板语句的执行上下文。
 * 出现在模板语句中的每个标识符都属于特定的上下文对象。
 * 这个对象通常都是控制此模板的 Angular 组件。
 * 上例中只显示了一行 HTML，那段 HTML 片段属于下面这个组件。
 *
 * 当用户点击按钮时，Angular 调用 ClickMeComponent 的 onClickMe 方法。
 *
 * 通过 $event 对象取得用户输入
 * DOM 事件可以携带可能对组件有用的信息。
 * 本节将展示如何绑定输入框的 keyup 事件，在每个敲击键盘时获取用户输入。
 * 下面的代码监听 keyup 事件，并将整个事件载荷 ($event) 传递给组件的事件处理器。
 *
 * $event 对象的属性取决于 DOM 事件的类型。例如，鼠标事件与输入框编辑事件包含了不同的信息。
 *
 * 所有标准 DOM 事件对象都有一个 target 属性， 引用触发该事件的元素。
 * 在本例中，target 是<input> 元素， event.target.value 返回该元素的当前内容。
 *
 * 在组件的 onKey() 方法中，把输入框的值和分隔符 (|) 追加组件的 values 属性。
 * 使用插值表达式来把存放累加结果的 values 属性回显到屏幕上。
 *
 * 假设用户输入字母“abc”，然后用退格键一个一个删除它们。 用户界面将显示：
 * a | ab | abc | ab | a | |
 * 或者，你可以用 event.key 替代 event.target.value，积累各个按键本身，这样同样的用户输入可以产生：
 * a | b | c | backspace | backspace | backspace |
 *
 * $event的类型
 * 上例将 $event 转换为 any 类型。
 * 这样简化了代码，但是有成本。 没有任何类型信息能够揭示事件对象的属性，防止简单的错误。
 * 下面的例子，使用了带类型方法。
 * $event 的类型现在是 KeyboardEvent。
 * 不是所有的元素都有 value 属性，所以它将 target 转换为输入元素。
 * OnKey 方法更加清晰的表达了它期望从模板得到什么，以及它是如何解析事件的。
 *
 * 传入 $event 是靠不住的做法
 * 类型化事件对象揭露了重要的一点，即反对把整个 DOM 事件传到方法中，因为这样组件会知道太多模板的信息。
 * 只有当它知道更多它本不应了解的 HTML 实现细节时，它才能提取信息。
 * 这就违反了模板（用户看到的）和组件（应用如何处理用户数据）之间的分离关注原则。
 *
 * 下面将介绍如何用模板引用变量来解决这个问题。
 *
 * 从一个模板引用变量中获得用户输入
 * 还有另一种获取用户数据的方式：使用 Angular 的模板引用变量。
 * 这些变量提供了从模块中直接访问元素的能力。 在标识符前加上井号 (#) 就能声明一个模板引用变量。
 *
 * 下面的例子使用了局部模板变量，在一个超简单的模板中实现按键反馈功能。
 * 这个模板引用变量名叫 box，在 <input> 元素声明，它引用 <input> 元素本身。
 * 代码使用 box 获得输入元素的 value 值，并通过插值表达式把它显示在 <p> 标签中。
 *
 * 这个模板完全是完全自包含的。它没有绑定到组件，组件也没做任何事情。
 *
 * 在输入框中输入，就会看到每次按键时，显示也随之更新了。
 *
 * 除非你绑定一个事件，否则这将完全无法工作。
 * 只有在应用做了些异步事件（如击键），Angular 才更新绑定（并最终影响到屏幕）。
 * 本例代码将 keyup 事件绑定到了数字 0，这可能是最短的模板语句了。
 * 虽然这个语句不做什么，但它满足 Angular 的要求，所以 Angular 将更新屏幕。
 *
 * 从模板变量获得输入框比通过 $event 对象更加简单。
 * 下面的代码重写了之前 keyup 示例，它使用变量来获得用户输入。
 * 这个方法最漂亮的一点是：组件代码从视图中获得了干净的数据值。再也不用了解 $event 变量及其结构了。
 */
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  values2 = '';

  onKey(value: string) {
    this.values2 += value + ' | ';
  }
}
